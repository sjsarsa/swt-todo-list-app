-- Users
CREATE TABLE users (
 id SERIAL PRIMARY KEY,
 username VARCHAR(255) UNIQUE NOT NULL,
 password TEXT NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Todos
CREATE TABLE todo_list (
 id SERIAL PRIMARY KEY,
 author_id INTEGER NOT NULL,
 name VARCHAR(255) NOT NULL,
 description TEXT,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 UNIQUE (author_id, name),
 FOREIGN KEY (author_id) REFERENCES users(id)
);

-- TODO: Add repeat interval, completed as date (maybe)
CREATE TABLE todo_item (
 id SERIAL PRIMARY KEY,
 author_id INTEGER NOT NULL,
 todo_list_id INTEGER NOT NULL,
 description TEXT NOT NULL,
 due_date DATE,
 completed BOOLEAN NOT NULL DEFAULT FALSE,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (author_id) REFERENCES users(id),
 FOREIGN KEY (todo_list_id) REFERENCES todo_list(id)
);


CREATE TABLE todo_list_role (
 id SERIAL PRIMARY KEY,
 name VARCHAR(255) UNIQUE NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO todo_list_role (name) VALUES ('owner');
INSERT INTO todo_list_role (name) VALUES ('editor');
INSERT INTO todo_list_role (name) VALUES ('viewer');


CREATE TABLE todo_list_member (
 todo_list_id INTEGER NOT NULL,
 user_id INTEGER NOT NULL,
 todo_list_role_id INTEGER NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (todo_list_id, user_id),
 FOREIGN KEY (todo_list_id) REFERENCES todo_list(id),
 FOREIGN KEY (user_id) REFERENCES users(id),
 FOREIGN KEY (todo_list_role_id) REFERENCES todo_list_role(id)
);


CREATE TABLE todo_item_assignee (
 todo_item_id INTEGER NOT NULL,
 user_id INTEGER NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (todo_item_id, user_id),
 FOREIGN KEY (todo_item_id) REFERENCES todo_item(id),
 FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE todo_item_comment (
 id SERIAL PRIMARY KEY,
 todo_item_id INTEGER NOT NULL,
 user_id INTEGER NOT NULL,
 text TEXT NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (todo_item_id) REFERENCES todo_item(id),
 FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Tags
CREATE TABLE tag_category (
 id SERIAL PRIMARY KEY,
 author_id INTEGER NOT NULL,
 name VARCHAR(255) UNIQUE NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (author_id) REFERENCES users(id)
);

CREATE TABLE tag (
 id SERIAL PRIMARY KEY,
 author_id INTEGER NOT NULL,
 category VARCHAR(255),
 name VARCHAR(255) UNIQUE NOT NULL,
 color VARCHAR(9) NOT NULL DEFAULT '#000000',
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 FOREIGN KEY (category) REFERENCES tag_category(name),
 FOREIGN KEY (author_id) REFERENCES users(id)
);

CREATE TABLE todo_item_tag (
 todo_item_id INTEGER NOT NULL,
 tag_id INTEGER NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (todo_item_id, tag_id),
 FOREIGN KEY (todo_item_id) REFERENCES todo_item(id),
 FOREIGN KEY (tag_id) REFERENCES tag(id)
);

CREATE TABLE todo_list_tag (
 todo_list_id INTEGER NOT NULL,
 tag_id INTEGER NOT NULL,
 created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (todo_list_id, tag_id),
 FOREIGN KEY (todo_list_id) REFERENCES todo_list(id),
 FOREIGN KEY (tag_id) REFERENCES tag(id)
);
